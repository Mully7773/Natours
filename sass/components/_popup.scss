@use "../abstracts/variables";
@use "../abstracts/mixins";

.popup {
  position: fixed;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  background-color: rgba($color: variables.$color-black, $alpha: 0.8);
  top: 0;
  left: 0;
  z-index: 3000;

  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;

  &__content {
    @include mixins.absCenter;

    width: 75%;
    background-color: variables.$color-white;
    box-shadow: 0 2rem 4rem rgba($color: variables.$color-black, $alpha: 0.2);
    border-radius: 0.3rem;
    display: table;
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    // Third property is delay
    transition: all 0.4s 0.2s;
  }

  &__left {
    width: 33.3333333%;
    display: table-cell;
    vertical-align: middle;
  }

  &__right {
    width: 66.6666667%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;
  }

  &__img {
    display: block;
    width: 100%;
    object-fit: contain;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    // Automatically creates two columns
    column-count: 2;
    column-gap: 4rem; //1em === 14px default is 1em

    // Nice for vertical separation line
    column-rule: 1px solid variables.$color-grey-light-2;

    // Hyphenates the text if it goes beyond the end of the space
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
  }

  //   Open states:
  &:target {
    // id=popup will become the target, so when we click on the button and the URL has 'popup' at the end of it, these styles will be applied
    opacity: 1;
    visibility: visible;
  }

  //   When the popup becomes the target - styling the popup content when the popup becomes the target
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__close {
    &:link,
    &:visited {
      color: variables.$color-grey-dark;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3.5rem;
      text-decoration: none;
      display: inline-block;
      transition: all 0.2s;
      line-height: 1;
    }

    &:hover {
      color: variables.$color-primary;
    }
  }
}
